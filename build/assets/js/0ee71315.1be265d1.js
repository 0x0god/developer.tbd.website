"use strict";(self.webpackChunkdeveloper_tbd_website=self.webpackChunkdeveloper_tbd_website||[]).push([[4106],{31768:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>c,frontMatter:()=>d,metadata:()=>i,toc:()=>s});var a=o(87462),n=(o(67294),o(3905));const d={},l="Build a ToDo App",i={unversionedId:"web5/build/apps/todo-app-tutorial",id:"web5/build/apps/todo-app-tutorial",title:"Build a ToDo App",description:"In this tutorial, you will learn how to build a basic single-party decentralized ToDo app written using web5.js. It\u2019s composed of a Vue.js app powered by web5.js which adds data storage underpinned by a Decentralized Web Node (DWN).",source:"@site/docs/web5/build/apps/todo-app-tutorial.mdx",sourceDirName:"web5/build/apps",slug:"/web5/build/apps/todo-app-tutorial",permalink:"/docs/web5/build/apps/todo-app-tutorial",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Host a DWN Server",permalink:"/docs/web5/build/decentralized-web-nodes/host-dwn-server"},next:{title:"API Reference",permalink:"/docs/api/"}},r={},s=[{value:"Getting the Skeleton App",id:"getting-the-skeleton-app",level:2},{value:"Setup",id:"setup",level:2},{value:"App Architecture",id:"app-architecture",level:2},{value:"Initialize Constants and Variables",id:"initialize-constants-and-variables",level:2},{value:"Create DID and Web5 Instance",id:"create-did-and-web5-instance",level:2},{value:"Displaying Todos",id:"displaying-todos",level:2},{value:"Adding ToDos",id:"adding-todos",level:2},{value:"Deleting ToDos",id:"deleting-todos",level:2},{value:"Toggling ToDo Status",id:"toggling-todo-status",level:2}],p={toc:s},u="wrapper";function c(e){let{components:t,...o}=e;return(0,n.kt)(u,(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"build-a-todo-app"},"Build a ToDo App"),(0,n.kt)("p",null,"In this tutorial, you will learn how to build a basic single-party decentralized ToDo app written using ",(0,n.kt)("inlineCode",{parentName:"p"},"web5.js"),". It\u2019s composed of a ",(0,n.kt)("inlineCode",{parentName:"p"},"Vue.js")," app powered by ",(0,n.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@tbd54566975/web5"},"web5.js")," which adds data storage underpinned by a ",(0,n.kt)("a",{parentName:"p",href:"/docs/web5/learn/decentralized-web-nodes"},"Decentralized Web Node")," (DWN)."),(0,n.kt)("p",null,"The ToDo app is a basic single-user, local application that only leverages ",(0,n.kt)("inlineCode",{parentName:"p"},"web5.js")," for storage purposes, but serves as an important precursor to building larger decentralized apps."),(0,n.kt)("p",null,"By the end of this tutorial, you\u2019ll have a solid understanding of the basics of creating, reading, and writing to a DWN and will be on your way to creating serverless, decentralized applications."),(0,n.kt)("h2",{id:"getting-the-skeleton-app"},"Getting the Skeleton App"),(0,n.kt)("p",null,"Download a copy of the skeleton ToDo app by running:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/TBD54566975/web5-tutorials.git\ncd web5-tutorials\ngit checkout tags/0.2.0 -b todo-app-tutorial\ncd todo-app\n")),(0,n.kt)("p",null,"In this tutorial, you\u2019ll work through completing the ",(0,n.kt)("inlineCode",{parentName:"p"},"/todo-app/src/App.vue")," file to use ",(0,n.kt)("inlineCode",{parentName:"p"},"web5.js"),"."),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Finished ToDo App"),(0,n.kt)("p",null,(0,n.kt)("p",null,"If you\u2019d like to skip ahead and see the finished version of this tutorial, you can download and run that example by executing:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/TBD54566975/incubating-web5-labs.git\ncd incubating-web5-labs\ngit checkout tags/0.2.0 -b incubating-web5-labs-todo-app\ncd todo-app\nnpm install\nnpm run dev\n")),(0,n.kt)("p",null,"There is also a hosted example deployed at ",(0,n.kt)("a",{parentName:"p",href:"https://unrivaled-crumble-56ce70.netlify.app/"},"https://unrivaled-crumble-56ce70.netlify.app/"),"."))),(0,n.kt)("h2",{id:"setup"},"Setup"),(0,n.kt)("p",null,"Add ",(0,n.kt)("inlineCode",{parentName:"p"},"Web5")," to package.json in the ",(0,n.kt)("inlineCode",{parentName:"p"},"dependencies")," section:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'  "@tbd54566975/web5": "0.7.2",\n')),(0,n.kt)("p",null,"Download the necessary packages by running these commands:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"npm install\nnpm run dev\n")),(0,n.kt)("p",null,"You should now have the app running on ",(0,n.kt)("a",{parentName:"p",href:"https://localhost:5173/"},(0,n.kt)("inlineCode",{parentName:"a"},"https://localhost:5173")),"; this will be a starter application with a mostly blank page. In this tutorial, we'll build the rest."),(0,n.kt)("h2",{id:"app-architecture"},"App Architecture"),(0,n.kt)("p",null,"There are 3 main components to your ToDo app: HTML, CSS, and Javascript. The way that ",(0,n.kt)("inlineCode",{parentName:"p"},"web5.js")," changes the layout of your ToDo app compared to the way a traditional web app would be laid out is by replacing the RESTful calls you\u2019d normally make with calls to the DWN."),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Think of ",(0,n.kt)("inlineCode",{parentName:"p"},"web5.js")," as your storage, RESTful API service, and the backing data store.")),(0,n.kt)("p",null,"Because we\u2019ve built this sample using ",(0,n.kt)("inlineCode",{parentName:"p"},"Vue.js"),", you\u2019ll find both the HTML structure of the app and the JS logic within the ",(0,n.kt)("inlineCode",{parentName:"p"},"App.vue")," file. Your ToDo app will have a few main responsibilities to implement:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Create a new DWN for the user or load their saved DWN for storage"),(0,n.kt)("li",{parentName:"ul"},"Display ToDos"),(0,n.kt)("li",{parentName:"ul"},"Create ToDos"),(0,n.kt)("li",{parentName:"ul"},"Delete ToDos"),(0,n.kt)("li",{parentName:"ul"},"Toggle ToDo status")),(0,n.kt)("h2",{id:"initialize-constants-and-variables"},"Initialize Constants and Variables"),(0,n.kt)("p",null,"Open ",(0,n.kt)("inlineCode",{parentName:"p"},"src/Vue.js")," in your editor and add this next to the other imports:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"import { Web5 } from '@tbd54566975/web5';\n")),(0,n.kt)("p",null,"First we'll set up instances to hold data you'll use throughout your application."),(0,n.kt)("p",null,"Copy the following block and paste under all ",(0,n.kt)("inlineCode",{parentName:"p"},"import")," statements in ",(0,n.kt)("inlineCode",{parentName:"p"},"src/Vue.js"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"let web5;\nlet myDid;\nconst todos = ref([]);\n")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"web5")," object is the single entry point for all Web5 operations. You've also set up a ",(0,n.kt)("inlineCode",{parentName:"p"},"todos")," array to hold your ToDos, and a variable to remember the app user's decentralized identifier (DID) as ",(0,n.kt)("inlineCode",{parentName:"p"},"myDid"),"."),(0,n.kt)("h2",{id:"create-did-and-web5-instance"},"Create DID and Web5 Instance"),(0,n.kt)("p",null,"The first time a user accesses your ToDo app, you\u2019ll need to handle creating an \u201caccount\u201d for them - this means ensuring they have a DID and DWN available to access their app data. Once they come back for subsequent sessions, you\u2019ll want to fetch and load that data for them."),(0,n.kt)("p",null,"Add to ",(0,n.kt)("inlineCode",{parentName:"p"},"src/App.vue"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"onBeforeMount(async () => {\n  ({ web5, did: myDid } = await Web5.connect());\n")),(0,n.kt)("h2",{id:"displaying-todos"},"Displaying Todos"),(0,n.kt)("p",null,"You can now make calls to the DWN to fetch, write, and delete data. To load your user\u2019s existing ToDos, call:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"onBeforeMount(async () => {\n  ...\n  // Populate ToDos from DWN\n  const { records } = await web5.dwn.records.query({\n    message: {\n      filter: {\n        schema: 'http://some-schema-registry.org/todo'\n      },\n      dateSort: 'createdAscending'\n    }\n  });\n")),(0,n.kt)("p",null,"Once you\u2019ve loaded the query data, you can map this data from the DWN into an object for your app to use:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"onBeforeMount(async () => {\n  ...\n  // Add entry to ToDos array\n  for (let record of records) {\n    const data = await record.data.json();\n    const todo = { record, data, id: record.id };\n    todos.value.push(todo);\n  }\n});\n")),(0,n.kt)("p",null,"Now that your app user's ToDos are stored in their DWN, you can display them by using the ",(0,n.kt)("inlineCode",{parentName:"p"},"todos")," object. In this example, you can do it by adding the following HTML code to the Vue app below the JS, just as you would in any non-Web5 app."),(0,n.kt)("p",null,"In the template where you see ",(0,n.kt)("inlineCode",{parentName:"p"},"\x3c!-- ToDos --\x3e")," add this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},'<div v-if="(todos.length > 0)" class="border-gray-200 border-t border-x mt-16 rounded-lg shadow-md sm:max-w-xl sm:mx-auto sm:w-full">\n  <div v-for="todo in todos" :key="todo" class="border-b border-gray-200 flex items-center p-4">\n    <div @click="toggleTodoComplete(todo)" class="cursor-pointer">\n      <CheckCircleIcon class="h-8 text-gray-200 w-8" :class="{ \'text-green-500\': todo.data.completed }" />\n    </div>\n    <div class="font-light ml-3 text-gray-500 text-xl">\n      {{ todo.data.description }}\n    </div>\n    \x3c!-- Delete ToDo goes here later --\x3e\n  </div>\n</div>\n')),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Note that this UI code fulfills more than just loading the ToDos - it also provides the ability to toggle completion status and delete ToDos, which we\u2019ll get to in a bit.")),(0,n.kt)("h2",{id:"adding-todos"},"Adding ToDos"),(0,n.kt)("p",null,"To allow for add functionality, begin by creating the UI needed to add ToDos."),(0,n.kt)("p",null,"In the template add this code block to ",(0,n.kt)("inlineCode",{parentName:"p"},"\x3c!-- Add ToDos Form --\x3e"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},'<div class="mt-16">\n  <form class="flex space-x-4" @submit.prevent="addTodo">\n    <div class="border-b border-gray-200 sm:w-full">\n      <label for="add-todo" class="sr-only">Add a todo</label>\n      <textarea\n        rows="1" name="add-todo" id="add-todo" v-model="newTodoDescription"\n        @keydown.enter.exact.prevent="addTodo"\n        class="block border-0 border-transparent focus:ring-0 p-0 pb-2 resize-none sm:text-sm w-96"\n        placeholder="Add a Todo" />\n    </div>\n    <button type="submit" class="bg-indigo-600 border border-transparent focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 hover:bg-indigo-700 inline-flex items-center p-1 rounded-full shadow-sm text-white">\n      <PlusIconMini class="h-5 w-5" aria-hidden="true" />\n    </button>\n  </form>\n</div>\n')),(0,n.kt)("p",null,"Then, writing a ToDo into storage is done by binding a ",(0,n.kt)("inlineCode",{parentName:"p"},"addTodo()")," method to the UI and leveraging the ",(0,n.kt)("inlineCode",{parentName:"p"},"newTodoDescription")," model referenced in the ",(0,n.kt)("inlineCode",{parentName:"p"},"textarea")," to call the ",(0,n.kt)("inlineCode",{parentName:"p"},"web5")," method ",(0,n.kt)("inlineCode",{parentName:"p"},"dwn.records.write"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"// Adding ToDos\nconst newTodoDescription = ref('');\n\nasync function addTodo() {\n  const todoData = {\n    completed   : false,\n    description : newTodoDescription.value\n  };\n\n  newTodoDescription.value = '';\n\n  // Create the record in DWN\n  const { record } = await web5.dwn.records.create({\n    data    : todoData,\n    message : {\n      schema     : 'http://some-schema-registry.org/todo',\n      dataFormat : 'application/json'\n    }\n  });\n")),(0,n.kt)("p",null,"This code uses the ",(0,n.kt)("inlineCode",{parentName:"p"},"myDid")," object we loaded or created in the ",(0,n.kt)("inlineCode",{parentName:"p"},"onBeforeMount")," function and uses it to write into the DWN that ",(0,n.kt)("inlineCode",{parentName:"p"},"web5")," is using to store your app user's data."),(0,n.kt)("p",null,"Once we\u2019ve written the data to storage, we\u2019ll use the returned ",(0,n.kt)("inlineCode",{parentName:"p"},"record")," to create your app's ",(0,n.kt)("inlineCode",{parentName:"p"},"todo")," object, passing along the ",(0,n.kt)("inlineCode",{parentName:"p"},"record.id")," :"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"async function addTodo() {\n...\n  // add DWeb message recordId as a way to reference the message for further operations\n  // e.g. updating it or overwriting it\n  const data = await record.data.json();\n  const todo = { record, data, id: record.id };\n  todos.value.push(todo);\n}\n")),(0,n.kt)("h2",{id:"deleting-todos"},"Deleting ToDos"),(0,n.kt)("p",null,"Deleting ToDos can be done by using the ",(0,n.kt)("inlineCode",{parentName:"p"},"deleteTodo")," method, passing the ",(0,n.kt)("inlineCode",{parentName:"p"},"todoItem"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"// Delete ToDo\nasync function deleteTodo(todoItem) {\n  let deletedTodo;\n  let index = 0;\n\n  for (let todo of todos.value) {\n    if (todoItem.id === todo.id) {\n      deletedTodo = todo;\n      break;\n    }\n    index ++;\n  }\n\n  todos.value.splice(index, 1);\n\n  // Delete the record in DWN\n  await web5.dwn.records.delete({\n    message: {\n      recordId: deletedTodo.id\n    }\n  });\n}\n")),(0,n.kt)("p",null,"We\u2019ll connect that to the UI with the following code. This replaces the ",(0,n.kt)("inlineCode",{parentName:"p"},"\x3c!-- Delete ToDo goes here later --\x3e")," comment we placed from above:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},'<div class="ml-auto">\n  <div @click="deleteTodo(todo)" class="cursor-pointer">\n    <TrashIcon class="h-8 text-gray-200 w-8" :class="\'text-red-500\'" />\n  </div>\n</div>\n')),(0,n.kt)("h2",{id:"toggling-todo-status"},"Toggling ToDo Status"),(0,n.kt)("p",null,"To toggle a ToDo\u2019s status, you\u2019ll need to change its status both in your local ",(0,n.kt)("inlineCode",{parentName:"p"},"todos")," object and in your web5-managed DWN. You can do so by modifying the ",(0,n.kt)("inlineCode",{parentName:"p"},"todos")," object and then using a ",(0,n.kt)("inlineCode",{parentName:"p"},"record.update")," call to update the ToDo in your data store:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"// Toggling ToDo Status\nasync function toggleTodoComplete(todoItem) {\n  let toggledTodo;\n  let updatedTodoData;\n\n  for (let todo of todos.value) {\n    if (todoItem.id === todo.id) {\n      toggledTodo = todo;\n      todo.data.completed = !todo.data.completed;\n      updatedTodoData = { ...toRaw(todo.data) };\n      break;\n    }\n  }\n\n  // Get record in DWN\n  const { record } = await web5.dwn.records.read({\n    message: {\n      recordId: toggledTodo.id,\n    }\n  });\n\n  // Update the record in DWN\n  await record.update({ data: updatedTodoData });\n}\n")),(0,n.kt)("p",null,"Congratulations, you've just built a decentralized web app! Feel free to check out the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/TBD54566975/incubating-web5-labs/tree/0.2.0/todo-app"},"finished version of the ToDo app here")," or see it deployed ",(0,n.kt)("a",{parentName:"p",href:"https://unrivaled-crumble-56ce70.netlify.app/"},"here"),"."))}c.isMDXComponent=!0}}]);