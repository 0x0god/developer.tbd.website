"use strict";(self.webpackChunkdeveloper_tbd_website=self.webpackChunkdeveloper_tbd_website||[]).push([[9947],{68294:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>n,metadata:()=>d,toc:()=>s});var o=a(87462),i=(a(67294),a(3905));const n={sidebar_position:1},r="Write to Decentralized Web Nodes",d={unversionedId:"web5/build/decentralized-web-nodes/write-to-dwn",id:"web5/build/decentralized-web-nodes/write-to-dwn",title:"Write to Decentralized Web Nodes",description:"Before writing to your Decentralized Web Node (DWN), be sure to check out our Quickstart guide to ensure you\u2019ve properly imported the Web5 SDK. Additionally, make sure you\u2019ve set up a DID before attempting to write to a DWN.",source:"@site/docs/web5/build/decentralized-web-nodes/write-to-dwn.mdx",sourceDirName:"web5/build/decentralized-web-nodes",slug:"/web5/build/decentralized-web-nodes/write-to-dwn",permalink:"/docs/web5/build/decentralized-web-nodes/write-to-dwn",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Create a Decentralized Identifier",permalink:"/docs/web5/build/decentralized-identifiers/how-to-create-did"},next:{title:"Read from Decentralized Web Nodes",permalink:"/docs/web5/build/decentralized-web-nodes/read-from-dwn"}},l={},s=[{value:"Write to a DWN",id:"write-to-a-dwn",level:2}],p={toc:s},u="wrapper";function c(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,o.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"write-to-decentralized-web-nodes"},"Write to Decentralized Web Nodes"),(0,i.kt)("p",null,"Before writing to your Decentralized Web Node (DWN), be sure to check out our ",(0,i.kt)("a",{parentName:"p",href:"../../quickstart"},"Quickstart guide")," to ensure you\u2019ve properly imported the Web5 SDK. Additionally, make sure you\u2019ve set up a DID before attempting to write to a DWN."),(0,i.kt)("h2",{id:"write-to-a-dwn"},"Write to a DWN"),(0,i.kt)("p",null,"The following snippet allows you to create a record in your ",(0,i.kt)("inlineCode",{parentName:"p"},"Web5")," instance\u2019s DWN using a DID object called ",(0,i.kt)("inlineCode",{parentName:"p"},"myDid"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"// Create a plain text record in the in-memory DWN\n\nconst { record } = await web5.dwn.records.create({\n    data: \"Hello Web5\",\n    message: {\n        dataFormat: 'text/plain',\n    },\n});\n")),(0,i.kt)("p",null,"The create\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"request"),"\xa0must contain the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"message")),"\xa0-\xa0",(0,i.kt)("em",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"em"},"object")),": The properties of the DWeb Node Message Descriptor that will be used to construct a valid DWeb Node message. ",(0,i.kt)("inlineCode",{parentName:"li"},"schema"),", is an optional parameter, and if used it does not need to be a resolvable url. ",(0,i.kt)("inlineCode",{parentName:"li"},"dataFormat")," should conform to one of the ",(0,i.kt)("a",{parentName:"li",href:"https://www.iana.org/assignments/media-types/media-types.xhtml"},"IANA media types"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"data")),"\xa0-\xa0",(0,i.kt)("em",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"em"},"blob | stream | file")),": The data object of the bytes to be sent.")))}c.isMDXComponent=!0}}]);